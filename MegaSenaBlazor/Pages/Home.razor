@page "/"

@using MegaSenaBlazor.Services

@inject MegaSenaService MegaSenaService

<PageTitle>Gerador de Números da Sorte</PageTitle>

<h3>Último Resultado Oficial</h3>

@if (latestResult is null)
{
    <p>Carregando...</p>
}
else
{
    <div style="margin-bottom: 1rem;">
        <strong>Consurso:</strong> @latestResult.DrawNumber <br />
        <strong>Data:</strong> @latestResult.Date <br />
        <strong>Números:</strong> @string.Join(", ", latestResult.Numbers) <br />
        <strong>Acumulou:</strong> @(latestResult.IsAccumulated ? "Yes" : "No") <br />
        <strong>Data do próximo concurso:</strong> @latestResult.NextDrawDate
    </div>
}

<hr />

<h3>Gerador de Números Mega-Sena</h3>

<p>Números Gerados:</p>

@if (generatedNumbers.Count > 0)
{
    <p>@string.Join(", ", generatedNumbers.OrderBy(n => n))</p>
}

<button @onclick="GenerateNumbers">Gerar</button>

@code {
    private List<int> generatedNumbers = new();
    private MegaSenaResult? latestResult;

    private void GenerateNumbers()
    {
        var rand = new Random();
        generatedNumbers = Enumerable.Range(1, 60)
                                     .OrderBy(_ => rand.Next())
                                     .Take(6)
                                     .ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        latestResult = await MegaSenaService.GetLatestResultAsync();
    }
}
